plotter(subset(f,contrast=='site'),subset(b,contrast=='site'),c("Women","Men"),range=2,main="A. Suitability by Site Effects")
subset(f,contrast=='site')
mean(subset(f,contrast=='site')$center)
source('../../dev/libC.R')
source('../../dev/libC.R')
source('../../shared/libC.R')
dat=makeDataFrame2()
N=length(dat$site)
I=max(dat$site)
samp=sampleFull(dat)
unlink('p_cache', recursive = TRUE)
source('../../shared/libC.R')
dat=makeDataFrame2()
N=length(dat$site)
I=max(dat$site)
samp=sampleFull(dat)
library(BayesFactor)
samp=sampleFull(dat)
dim(a)
intercept=samp[,1]+samp[,1+(1:I)]
a=intercept+samp[,1+((I+1):(2*I))]+samp[,1+6*I+1]
c=intercept+samp[,1+((2*I+1):(3*I))]+samp[,1+6*I+2]
e=intercept+samp[,1+((3*I+1):(4*I))]+samp[,1+6*I+3]
n=intercept+samp[,1+((4*I+1):(5*I))]+samp[,1+6*I+4]
o=intercept+samp[,1+((5*I+1):(6*I))]+samp[,1+6*I+5]
dim(a)
apply(a,1,sd)
hist(apply(a,1,sd))
quantile(apply(a,1,sd),p=c(.025,.5,.975))
a.sd=quantile(apply(a,1,sd),p=c(.025,.5,.975))
c.sd=quantile(apply(c,1,sd),p=c(.025,.5,.975))
e.sd=quantile(apply(e,1,sd),p=c(.025,.5,.975))
n.sd=quantile(apply(n,1,sd),p=c(.025,.5,.975))
o.sd=quantile(apply(o,1,sd),p=c(.025,.5,.975))
o.sd
a.sd
e.sd
n.sd
a.sd
c.sd
n.sd
e.sd
o.sd
plot(m,1:5)
m=c(a.sd[2],c.sd[2],e.sd[2],n.sd[2],o.sd[2])
plot(m,1:5)
m=c(a.sd[2],c.sd[2],e.sd[2],n.sd[2],o.sd[2])
par(mar=c(4,8,1,1))
plot(m,1:5,typ='n',fig.width= 4,fig.height=4,fig.cap="Caption here",cache=TRUE,axes=F,)
axis(1)
m=c(a.sd[2],c.sd[2],e.sd[2],n.sd[2],o.sd[2])
par(mar=c(4,8,1,1))
plot(m,1:5,typ='n',fig.width= 4,fig.height=4,fig.cap="Caption here",cache=TRUE,axes=F)
plot(m,1:5,typ='n',axes=F)
axis(1)
plot(m,1:5,typ='n',axes=F)
axis(1)
plot(m,1:5)
plot(m,1:5,typ='n',axes=F)
plot(m,1:5,axes=F,xlab="Standard Deviation",ylab="")
axis(1)
plot(m,1:5)
axis(1)
plot(m,1:5,axes=F,xlab="Standard Deviation",ylab="")
axis(1)
plot(m,1:5,xlab="Standard Deviation",ylab="")
par(mar=c(4,8,1,1))
plot(m,1:5,xlab="Standard Deviation",ylab="")
plot(m,1:5,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
plot(m,1:5,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
par(mar=c(4,12,1,1))
plot(m,1:5,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
par(mar=c(4,12,1,1))
plot(m,1:5,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
par(mar=c(4,8,1,1))
plot(m,1:5,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,"Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness")
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,"Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness")
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,lab=("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F)
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,ylim=c(0,.20))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,xlim=c(0,.20))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
m=c(a.sd[2],c.sd[2],e.sd[2],n.sd[2],o.sd[2])
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,xlim=c(0,.20))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
l=c(a.sd[1],c.sd[1],e.sd[1],n.sd[1],o.sd[1])
m=c(a.sd[2],c.sd[2],e.sd[2],n.sd[2],o.sd[2])
u=c(a.sd[3],c.sd[3],e.sd[3],n.sd[3],o.sd[3])
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,xlim=c(0,.20))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
arrows(l,1:5,u,1:5,code=3,angle=90)
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,xlim=c(0,.20))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
arrows(l,5:1,u,5:1,code=3,angle=90)
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,xlim=c(0,.20),ylim=c(0,6))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
arrows(l,5:1,u,5:1,code=3,angle=90)
?arrows
par(mar=c(4,10,1,1))
plot(m,5:1,xlab="Standard Deviation",ylab="",axes=F,xlim=c(0,.20),ylim=c(0,6))
axis(1)
axis(2,at=1:5,lab=c("Openess","Neuroticism","Extroversion","Conscienciousness","Aggreeableness"),las=1)
arrows(l,5:1,u,5:1,code=3,angle=90,length=.1)
source('../../shared/libD.R')
source('../../shared/libD.R')
datHR=makeDatHR()
bf=doBayesFactor(datHR,c(1,.2,.2,.2,.2))
datHR=makeDatHR()
source('../../shared/libD.R')
source('../../shared/libD.R')
datHR=makeDatHR()
source('../../shared/libD.R')
datHR=makeDatHR()
out=doBayesFactor(datHR,c(1,.2,.2,.2,.2))
source('../../shared/libD.R')
datHR=makeDatHR()
out=doBayesFactor(datHR,c(1,.2,.2,.2,.2))
source('../../shared/libA.R')
dat=makeDataFrameW("../../shared/wagenmakersRawData/")
f=freqEst(dat)
b=bayesEst(dat)
bf=bayesBF(dat)
plotter(f,b,bf,axisText=c("Pout","Smile"))
bf
1.bf
1.bf
1/bf
source('../../shared/libD.R')
datHR=makeDatHR()
out=doBayesFactor(datHR,c(1,.2,.2,.2,.2)*5)
plotter(out$effect)
out$bf
bf4=c(out$bf,1)
bf=1/(bf4/max(bf4))
bf
datHR
m=tapply(dat$y,list(dat$site,dat$cond),mean)
m=tapply(datHR$y,list(datHR$site,datHR$cond),mean)
m
points(m[o],1:I,pch=21,bg='black',cex=1.1)}
plotter=function(samp.eff,effect){
m=apply(effect,2,mean)
I=length(m)
o=order(m)
q=apply(effect,2,quantile,p=c(.025,.975))
plot(m[o],1:I,xlim=c(min(q)-.01,max(q)+.01),typ='n',axes=F,ylab="Study",xlab="Stroop Effect (sec)",ylim=c(.6,I+.4))
arrows(q[1,o],1:3,q[2,o],1:3,code=3,angle=90,length=.1)
axis(1)
axis(2,at=1:I,las=1,label=NA)
points(m[o],1:I,pch=21,bg='black',cex=1.1)}
points(samp.eff[o],1:I,pch=4,cex=1.1)}
plotter=function(samp.eff,effect){
m=apply(effect,2,mean)
I=length(m)
o=order(m)
q=apply(effect,2,quantile,p=c(.025,.975))
plot(m[o],1:I,xlim=c(min(q)-.01,max(q)+.01),typ='n',axes=F,ylab="Study",xlab="Stroop Effect (sec)",ylim=c(.6,I+.4))
arrows(q[1,o],1:3,q[2,o],1:3,code=3,angle=90,length=.1)
axis(1)
axis(2,at=1:I,las=1,label=NA)
points(m[o],1:I,pch=21,bg='black',cex=1.1)
points(samp.eff[o],1:I,pch=4,cex=1.1)}
m=tapply(datHR$y,list(datHR$site,datHR$cond),mean)
samp.eff=m[,2]-m[,1]
plotter(samp.eff,out$effect)
source('../../shared/libC.R')
dat=makeDataFrame2()
N=length(dat$site)
I=max(dat$site)
I
bf1=bayesBF(datW,rScaleIndv=.3,rScaleMean=.5)
datW=makeDataFrameW("../../shared/wagenmakersRawData/")
bf1=bayesBF(datW,rScaleIndv=.3,rScaleMean=.5)
bf
bf1
1/bf1
bf2=bayesBF(datW,rScaleIndv=.075,rScaleMean=.2)
bf3=bayesBF(datW,rScaleIndv=.6,rScaleMean=1)
bf1
bf2
bf3
bf=matrix(nrow=9,ncol=3)
rM=rep(c(.5,.2,1),3)
rM
rFac=rep(c(.6,1,.2),each=3)
rFac
bf=matrix(nrow=9,ncol=3)
rM=rep(c(.5,.2,1),3)
rFac=rep(c(.6,1,.2),each=3)
for (i in 1:9)
bf[i,]=bayesBF(datW,rScaleIndv=rM[i]*rFac[i],rScaleMean=rM[i])
bf
1/bf
round(1/bf,2)
round(1/bf,0)
round(1/bf,1)
rM
rFac
options(scipen=3)
round(1/bf,1)
1/bf
options(scipen=1)
1/bf
options(scipen=2)
1/bf
?scipen
?format
format(1/bf)
format(1/bf,digits=2)
format(1/bf,digits=2,scientif=F)
format(1/bf,digits=2,scientif=F,nsmall=1)
format(1/bf,digits=2,scientif=F,nsmall=2)
format(1/bf,digits=2,scientif=F,nsmall=3)
format(1/bf,digits=0,scientif=F,nsmall=3)
format(1/bf,digits=0,scientif=T)
format(1/bf,digits=2,scientif=T)
1/bf
?options
1/bf
round(1/bf,1)
round(1/bf,0)
round(1/bf,1)
round(1/bf,1)
options(scipen=-3)
round(1/bf,1)
options(scipen=-2)
options(scipen=0)
round(1/bf,1)
options(scipen=-1)
round(1/bf,1)
options(scipen=-2)
round(1/bf,1)
options(scipen=-3)
round(1/bf,1)
options(scipen=0)
round(1/bf,1)
round(1/bf,1)
printBF=paste('1-to-',round(1/bf,1),sep='')
printBF=paste('1-to-',round(1/bf,1),sep='')
round(1/bf,1)
printBF
printBF=matrix(ncol=3,paste('1-to-',round(1/bf,1),sep=''))
printBF
round(1/bf,1)
forTable=data.frame(rM.rFac*rM,printBF)
forTable=data.frame(rM,rFac*rM,printBF)
forTable
bayesBF(datW,rScaleIndv=rM[i]*rFac[i],rScaleMean=rM[i])
forTable=data.frame(rM,rFac*rM,printBF[,2],printBF[,1])
colnames(forTable)= ("mean","sd","Null-to-Common","Null-to-Unconstrained")
colnames(forTable)= c("mean","sd","Null-to-Common","Null-to-Unconstrained")
forTable
es=seq(-2,2,.01)
L=length(es)
p=matrix(nrow=3,ncol=L)
p[1,]=dcauchy(es,0,.5)
p[2,]=dcauchy(es,0,.25)
p[3,]=dcauchy(es,0,1)
matplot(es,p,typ='l',lty=1,col='black')
p
matplot(es,t(p),typ='l',lty=1,col='black')
p[1,]=dcauchy(es,0,.5)
p[2,]=dcauchy(es,0,.2)
p[3,]=dcauchy(es,0,1)
matplot(es,t(p),typ='l',lty=1,col='black')
es=seq(-2,2,.01)
L=length(es)
p=matrix(nrow=3,ncol=L)
p[1,]=dcauchy(es,0,.4)
p[2,]=dcauchy(es,0,.2)
p[3,]=dcauchy(es,0,.8)
matplot(es,t(p),typ='l',lty=1,col='black')
ds=function(s,.5,r){
ds=function(s,r){
2*s*dinvgamma(s^2,.5,.5*r^2)
}
dinvgamma
library(MCMCpack)
ds=function(s,r){
2*s*dinvgamma(s^2,.5,.5*r^2)
}
ds=function(s,r){
2*s*dinvgamma(s^2,.5,.5*r^2)
}
s=seq(0,1,.001)
p=matrix(nrow=3,ncol=L)
p[1,]=ds(s,.25)
s=seq(0,1,.001)
L=length(s)
p=matrix(nrow=3,ncol=L)
p[1,]=ds(s,.25)
p[2,]=ds(s,.1)
p[3,]=ds(s,.4)
matplot(s,t(p),typ='l',lty=1,col='black')
rM=.4
rF=.6
library(MCMCpack)
es=seq(-2,2,.01)
L=length(es)
p=matrix(nrow=3,ncol=L)
p[1,]=dcauchy(es,0,rM)
p[2,]=dcauchy(es,0,rM/2)
p[3,]=dcauchy(es,0,rM*2)
matplot(es,t(p),typ='l',lty=1,col='black')
ds=function(s,r){
2*s*dinvgamma(s^2,.5,.5*r^2)
}
s=seq(0,1,.001)
L=length(s)
p=matrix(nrow=3,ncol=L)
p[1,]=ds(s,rm*rF)
s=seq(0,1,.001)
L=length(s)
p=matrix(nrow=3,ncol=L)
p[1,]=ds(s,rM*rF)
p[2,]=ds(s,rM)
p[3,]=ds(s,rM*rF/2)
matplot(s,t(p),typ='l',lty=1,col='black')
rmean=rep(c(rM,rM*2,rM/2),each=3)
rmean
rfac=rep(c(rF,1,rF/2),3)
rfac
rsd=rmean*rfac
source('../../shared/libA.R')
datW=makeDataFrameW("../../shared/wagenmakersRawData/")
f=freqEst(datW)
b=bayesEst(datW)
bfW=matrix(nrow=9,ncol=3)
rmean=rep(c(rM,rM*2,rM/2),each=3)
rfac=rep(c(rF,1,rF/2),3)
rsd=rmean*rfac
for (i in 1:9) bfW[i,]=bayesBF(datW,rmean[i],rsd[i])
plotter(f,b,bfW[1,],axisText=c("Pout","Smile"))
printBF=matrix(ncol=3,paste(round(1/bfW,1),'-to-1',sep=''))
forTable=data.frame(rmean,rsd,printBF[,2],printBF[,1])
colnames(forTable)= c("Mean","SD","Null-to-Common","Null-to-Unconstrained")
forTable
forTable=data.frame(rmean,rsd,printBF[,2],printBF[,1],printBF[,3])
colnames(forTable)= c("Mean","SD","Null-to-Common","Null-to-Unconstrained","Null-to-Positive")
forTable
integrand <- function(theta,ybar) .2 * dnorm(ybar,theta,5/sqrt(40))
predData <- function(ybar) integrate(integrand,lower=0,upper=5)
predData(0)
predData <- function(ybar) integrate(integrand,lower=0,upper=5,ybar=ybar)
predData(0)
predData <- function(ybar) integrate(integrand,lower=0,upper=5,ybar=ybar)$value
ybar=seq(-10,10,.01)
L=length(ybar)
p=1:L
for (i in 1:L) p[i]=predData(ybar[i])
plot(ybar,p,typ='l')
rSD
source('../../shared/libB.R')
myTab=bfTable(dat,rM,rSD)
dat=makeDataFrameML3("../../shared/ML3AllSites.csv")
source('../../shared/libB.R')
myTab=bfTable(dat,rM,rSD)
apa_table(myTab)
??apa_Table
bfTable(dat,rM/2,rSD/2
)
source('../../shared/libD.R')
datHR=makeDatHR()
out=doBayesFactor(datHR,c(5,1,1,.67,1.6))
m=tapply(datHR$y,list(datHR$site,datHR$cond),mean)
samp.eff=m[,2]-m[,1]
plotter(samp.eff,out$effect)
bf4=c(out$bf,1)
bf=1/(bf4/max(bf4))
bf
source('../../shared/libC.R')
dat=makeDataFrame2()
dat=makeDataFrame2()
N=length(dat$site)
I=max(dat$site)
out=bf(dat,1,.3)
source('../../shared/libC.R')
source('../../shared/libC.R')
out=bf(dat,1,.3)
out$bf
out$bf-out$bf[3]
exp(out$bf-out$bf[3])
mybf=1/exp(out$bf-out$bf[1])
mybf
87-48
215
256*256*32
source('../../shared/libA.R')
datW=makeDataFrameW("../../shared/wagenmakersRawData/")
datW[1,]
datW$cond
source('../../shared/libA.R')
datW=makeDataFrameW("../../shared/wagenmakersRawData/")
source('../../shared/libA.R')
datW=makeDataFrameW("../../shared/wagenmakersRawData/")
f=freqEst(datW)
b=bayesEst(datW,rScale)
library("papaja")
library("spatialfil")
library("tmvtnorm")
library("msm")
rM=.4
rF=.6
rSD=rM*rF
rScale=c(1,rSD,rM)
par(mfrow=c(1,2),mar=c(4,4,1,1),cex=1.1,mgp=c(2.3,1,0))
es=seq(-2,2,.01)
L=length(es)
p=matrix(nrow=3,ncol=L)
p[1,]=dcauchy(es,0,rM)
p[2,]=dcauchy(es,0,rM/2)
p[3,]=dcauchy(es,0,rM*2)
matplot(es,t(p),typ='l',lty=c(2,1,1),lwd=c(3,1,1),col='black',xlab=expression(paste(mu[theta]," (Effect Size Units)")),ylab="",axes=F)
axis(1)
ds=function(s,r){
2*s*dinvgamma(s^2,.5,.5*r^2)
}
s=seq(0,1,.001)
L=length(s)
p=matrix(nrow=3,ncol=L)
p[1,]=ds(s,rM*rF)
library("papaja")
library("spatialfil")
library("tmvtnorm")
library("msm")
library('MCMCpack')
rM=.4
rF=.6
rSD=rM*rF
rScale=c(1,rSD,rM)
par(mfrow=c(1,2),mar=c(4,4,1,1),cex=1.1,mgp=c(2.3,1,0))
es=seq(-2,2,.01)
L=length(es)
p=matrix(nrow=3,ncol=L)
p[1,]=dcauchy(es,0,rM)
p[2,]=dcauchy(es,0,rM/2)
p[3,]=dcauchy(es,0,rM*2)
matplot(es,t(p),typ='l',lty=c(2,1,1),lwd=c(3,1,1),col='black',xlab=expression(paste(mu[theta]," (Effect Size Units)")),ylab="",axes=F)
axis(1)
ds=function(s,r){
2*s*dinvgamma(s^2,.5,.5*r^2)
}
s=seq(0,1,.001)
L=length(s)
p=matrix(nrow=3,ncol=L)
p[1,]=ds(s,rM*rF)
p[2,]=ds(s,rM)
p[3,]=ds(s,rM*rF/2)
matplot(s,t(p),typ='l',lty=c(2,1,1),lwd=c(3,1,1),col='black',xlab=expression(paste(mu[sigma]," (Effect Size Units)")),ylab="",axes=F)
axis(1)
source('../../shared/libA.R')
datW=makeDataFrameW("../../shared/wagenmakersRawData/")
f=freqEst(datW)
b=bayesEst(datW,rScale)
bfW=matrix(nrow=9,ncol=3)
rmean=rep(c(rM,rM*2,rM/2),each=3)
rfac=rep(c(rF,1,rF/2),3)
rsd=rmean*rfac
for (i in 1:9) bfW[i,]=bayesBF(datW,rScale=c(1,rsd[i],rmean[i]))
i
rScale
bayesBF(datW)
bayesBF(datW,rScale)
rScale
dat <- c(-1,0,1,2) #the data are -1, 0, 1, 2
sampMean <- mean(dat)
tResults=t.test(dat)
tOut=apa_print(tResults)
library('papaja')
dat <- c(-1,0,1,2) #the data are -1, 0, 1, 2
sampMean <- mean(dat)
tResults=t.test(dat)
tOut=apa_print(tResults)
tOut
install.packages('gridbase')
install.packages('gridBase')
